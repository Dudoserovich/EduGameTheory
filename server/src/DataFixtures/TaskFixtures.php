<?php

namespace App\DataFixtures;

use App\Entity\Achievement;
use App\Entity\Task;
use App\Entity\TaskMark;
use App\Entity\Topic;
use App\Entity\User;
use App\Entity\UserAchievement;
use Doctrine\Common\DataFixtures\DependentFixtureInterface;
use Doctrine\Persistence\ObjectManager;

class TaskFixtures extends BaseFixtureAbstract implements DependentFixtureInterface
{
    public const TYPES = [
        'system',
        'teacher'
    ];

    const FLAGS_MATRIX = [
        'платёжная матрица',
        'матрица последствий'
    ];

    public const TASKS = [
//        [ 'name' => 'Камень-ножницы-бумага',
//            'description' => '
//            Стандартная игра в камень, ножницы, бумагу.
//            Однако, и она имеет математическую интерпретацию.
//
//            Данная игра относится к играм, **не имеющим конечного числа оптимальных стратегий**.
//            Поэтому решить её с помощью обычных методов не представляется возможным.
//            Эту задачу можно попробовать решить с помощью метода Брауна-Робинсона.
//
//            **Платёжная матрица имеет следующий вид:**
//
//            | 1-ый / 2-ой  | Камень  | Ножницы  | Бумага  |
//            | ------------------     | :--: | :--: | :--: |
//            | **Камень**       | 0       | 1 |  -1  |
//            | **Ножницы**      | -1       | 0 | 1 |
//            | **Бумага**       | 1 | -1 | 0 |
//
//
//            У каждого игрока **3 стратегии** - камень, ножницы или бумага.',
//            'matrix' => [[0, 1, -1], [-1, 0, 1], [1, -1, 0]],
//            'flagMatrix' => self::FLAGS_MATRIX[0],
//            'first_player' => null,
//            'second_player' => null,
//            'name_first_strategies' => ['Камень', 'Ножницы', 'Бумага'],
//            'name_second_strategies' => ['Камень', 'Ножницы', 'Бумага'],
//        ],
//        [ 'name' => 'Камень-Ножницы-Бумага-Ящерица-Спок',
//            'description' => '
//            Усложнённый вариант камень, ножницы, бумага, показанный в сериале "Теория большого взрыва".
//            Однако, и она имеет математическую интерпретацию.
//
//            Данная игра относится к играм, **не имеющим конечного числа оптимальных стратегий**.
//            Поэтому решить её с помощью обычных методов не представляется возможным.
//            Эту задачу можно попробовать решить с помощью метода Брауна-Робинсона.
//
//            **Платёжная матрица имеет следующий вид:**
//
//            | 1-ый / 2-ой  | Камень  | Ножницы  | Бумага  | Ящерица | Спок |
//            | ------------ | :--:    | :--: | :--: | :--: | :--: |
//            | **Камень**   | 0       | -1   |  1   | 1  | -1 |
//            | **Ножницы**  | 1       | 0    | -1   | -1 | 1  |
//            | **Бумага**   | -1      | 1    | 0    | 1  | -1 |
//            | **Ящерица**  | -1      | 1    | -1   | 0  | 1  |
//            | **Спок**     | 1       | -1   | 1    | -1 | 0  |
//
//            У каждого игрока **5 стратегий** - камень, ножницы или бумага.',
//            'matrix' => [[0, -1, 1, 1, -1], [1, 0, -1, -1, 1], [-1, 1, 0, 1, -1],
//                            [-1, 1, -1, 0, 1], [1, -1, 1, -1, 0]],
//            'flagMatrix' => self::FLAGS_MATRIX[0],
//            'first_player' => "Вы",
//            'second_player' => "Шелдон Купер",
//            'name_first_strategies' => ['Камень', 'Ножницы', 'Бумага', 'Ящерица', 'Спок'],
//            'name_second_strategies' => ['Камень', 'Ножницы', 'Бумага', 'Ящерица', 'Спок']
//        ],
        ['name' => 'Конкуренция на рынке',
            'description' => '
                В платёжной матрице размером 3x3 указано, какую долю рынка выиграет предприятие у своего единственного конкурента, если оно будет действовать согласно каждой из возможных **трех стратегий**, а конкурент – согласно каждой из своих возможных **трех стратегий**. 
                
                **Платёжная матрица:**
                
                | Ваше предприятие / Конкурент  | 1    | 2    | 3    |
                | ----------------------------- | :--: | :--: | :--: |
                | 1                             | 0.1  | 0.4  | 0.2  |
                | 2                             | 0.5  | 0.4  | 0.3  |
                | 3                             | 0.3  | 0.2  | 0.1  |
                
                > Требуется найти оптимальное решение для 1-го и 2-го предприятия, а так же цену игры.
            ',
            'matrix' =>
                [
                    [0.1, 0.4, 0.2],
                    [0.5, 0.4, 0.3],
                    [0.3, 0.2, 0.1]
                ],
            'flagMatrix' => self::FLAGS_MATRIX[0],
            'first_player' => "Ваше предприятие",
            'second_player' => "Конкурент",
            'name_first_strategies' => null,
            'name_second_strategies' => null
        ],
        ['name' => 'Битва за сокровище',
            'description' => '
                **Два игрока** ищут **сокровища** и каждый из их может выбрать стратегию, которой он будет придерживаться при поиске клада.
                **Всего сокровищ можно найти 8.**
                В платежной матрице размером 2x2 указано, какое количество сокровищ выиграет первый игрок, действуя по одной из стратегий.
                **Второй игрок выигрывает** 8 - найденное количество сокровищ первым игроком.
                
                **Платёжная матрица:**
                
                | Вы / Конкурент                | 1    | 2    |
                | ----------------------------- | :--: | :--: |
                | 1                             | 4    | 7    |
                | 2                             | 5    | 3    |
                
                > Требуется найти оптимальное решение для 1-го и 2-го игрока, а так же цену игры.
            ',
            'matrix' =>
                [
                    [4, 7],
                    [5, 3]
                ],
            'flagMatrix' => self::FLAGS_MATRIX[0],
            'first_player' => null,
            'second_player' => null,
            'name_first_strategies' => null,
            'name_second_strategies' => null
        ],
        ['name' => 'Акционерное общество',
            'description' => '
                **Две компании скупают акции** и каждая из них может выбрать одну из трех стратегий, которой он будет придерживаться при скупке акций. 
                В платежной матрице размером 2x2 указано, **на сколько пунктов вырастут** акции первой компании, действуя по одной из стратегий.
                **Вторая компания выигрывает** 10 - пункты акций 1-ой компании. 
                
                Требуется найти оптимальное решение для первого и второго игроков, а также цену игры. Контекст игры - поиск сокровищ.
            ',
            'matrix' =>
                [
                    [4, 7, 2],
                    [7, 3, 2],
                    [2, 1, 8]
                ],
            'flagMatrix' => self::FLAGS_MATRIX[0],
            'first_player' => "Первая компания",
            'second_player' => "Вторая компания",
            'name_first_strategies' => ["Акции Сбербанка", "Акции Газпрома", "Акции Xiaomi"],
            'name_second_strategies' => ["Акции Сбербанка", "Акции Газпрома", "Акции Xiaomi"],
        ],
        ['name' => 'Страхование груза',
            'description' => '
                **Владелец груза** должен выбрать одну из двух альтернатив: 
                - страховать груз;
                - не страховать груз.
                 
                Риск заключается в том, что **с вероятностью 0,1 возможна катастрофа**, в результате которой груз будет утрачен. 
                Если груз застрахован, то в случае его утраты владелец получает компенсацию его стоимости (100 000 руб.). 
                **Стоимость страхового полиса 5000 руб.** 
                
                > Требуется определить, стоит ли страховать груз?
            ',
            'matrix' =>
                [
                    [0, -1500000],
                    [-100000, -100000]
                ],
            'flagMatrix' => self::FLAGS_MATRIX[1],
            'first_player' => "Владелец груза",
            'second_player' => "Риски",
            'name_first_strategies' => null,
            'name_second_strategies' => null,
        ],
        ['name' => 'SpaceX',
            'description' => '
                **Вы - Илон Маск**, запускающий ракету на Марс.
                Запуск должен состояться уже сегодня, но что-то пошло не так, есть риск, что запуск пройдёт неудачно.
                
                > Какое решение стоит принять на основе матрицы последствий, чтобы снизить риски?
            ',
            'matrix' =>
                [
                    [2, 5, 8, 4],
                    [2, 3, 4, 12],
                    [8, 5, 3, 10],
                    [1, 4, 2, 8]
                ],
            'flagMatrix' => self::FLAGS_MATRIX[1],
            'first_player' => "Илон Маск",
            'second_player' => "Риски",
            'name_first_strategies' => null,
            'name_second_strategies' => null,
        ],
        ['name' => 'Выбор партии',
            'description' => '
                **2 партии конкурируют за голоса избирателей.**
                
                Есть 3 решения, которые может принять каждая из партий, которые могут повлиять на отношение к ним избирателей.
                Стоит решение по поводу проведения корриды.
                **Перед партиями стоят решения:** 
                - согласиться; 
                - игнорировать; 
                - отказаться.
                
                **Значения матрицы** - сколько голосов в процентах может получить каждая из партий.
                
                **Платёжная матрица:**
                
                | 1-ый / 2-ой  | Да | Игнорировать | Нет! |
                | ------------ | :--: | :--: | :--: |
                | Да           | -2 | 0 | 1 |
                | Игнорировать | -1 | -4 | 4 |
                | Нет!          | -3 | -5 | 0 |
                
                > Необходимо найти оптимальные стратегии и средний выигрыш процента голосов партии (цену игры).
                ',
            'matrix' =>
                [
                    [-2, 0, 1],
                    [-1, -4, 4],
                    [-3, -5, 0]
                ],
            'flagMatrix' => self::FLAGS_MATRIX[0],
            'first_player' => "Илон Маск",
            'second_player' => "Риски",
            'name_first_strategies' => null,
            'name_second_strategies' => null,
        ],
        ['name' => 'Тюремный покер',
            'description' => '
                **Игра на деньги.** Нужно на раз-два-три показать либо 1 палец, либо 2.
                Игроки делятся на чётных и нечётных.
                
                Чётный выигрывает если суммарное количество пальцев чётное. 
                Выигрывает ровно столько рублей, сколько пальцев в сумме.
                
                **Платёжная матрица:**
                
                | Чётный / Нечётный | 1 | 2 |
                | ------------ | :--: | :--: |
                | 1 | 2 |  -3 |
                | 2 | -3  | 4 |
                
                > Необходимо найти оптимальные стратегии и средний выигрыш (цену игры).
                ',
            'matrix' =>
                [
                    [2, -3],
                    [-3, 4]
                ],
            'flagMatrix' => self::FLAGS_MATRIX[0],
            'first_player' => "Чётный",
            'second_player' => "Нечётный",
            'name_first_strategies' => null,
            'name_second_strategies' => null,
        ],
        ['name' => 'Нападение и оборона',
            'description' => '
                Игрок А нападает на объект, игрок В — обороняет его.
                
                > У игрока А — два самолета; 
                > у игрока В — три зенитно-ракетных комплекса. 
                
                Для того чтобы объект был поражен, достаточно, чтобы к нему
                прорвался хотя бы один самолет. Самолеты стороны А могут выбирать для
                подхода к объекту любое из трех направлений: 1, 2. 3.
                
                Игрок В может, разместить любой из своих комплексов на любом
                направлении; при этом каждый комплекс простреливает только область
                пространства, относящуюся к данному направлению. Каждый комплекс
                может обстрелять только один самолет; обстрелянный самолет поражается с
                вероятностью 1.
                
                > Игрок А не знает, где размещены орудия; 
                > игрок В не знает, откуда прилетят самолеты.
                
                **Задача игрока А** — поразить объект.
                **Задача игрока В** — не допустить его поражения. Найти решение игры.
                
                **Стратегии А:**
                + Послать по одному самолёту на два различных направления ($А_1$)
                + Послать оба самолёта по одному направлению ($A_2$).
                
                **Стратегии Б:**
                + Поставить по одному орудию на каждое направление ($B_1).
                + Поставить два орудия на одно направление и одно на другое ($B_2$).
                + Поставить все три орудия на одно направление ($B_3$). 
                
                **Платёжная матрица:**
                
                | A / B | $B_1$ | $B_2$ | $B_3$ | 
                | ------------ | :--: | :--: | :--: |
                | $A_1$ | 0 | 2/3 | 1  |
                | $A_1$ | 1 | 2/3 | 2/3 |
                
                > На платёжной матрице отображена вероятность поражения объекта игроком А.
                > 
                > Необходимо найти оптимальные стратегии и выигрыш (цену игры).
                ',
            'matrix' =>
                [
                    [0, 2/3, 1],
                    [1, 2/3, 2/3]
                ],
            'flagMatrix' => self::FLAGS_MATRIX[0],
            'first_player' => "A",
            'second_player' => "B",
            'name_first_strategies' => ["A_1", "A_2"],
            'name_second_strategies' => ["B_1", "B_2", "B_3"],
        ],
        ['name' => 'Конкуренция на рынке Азии',
            'description' => '
                Две комании выходят на рынок со своими устройствами.
                - Компания Груша
                - Компания Рокия
                
                Груша выпускает - телефоны, ноутбуки, десктопы
                Рокия выпускает - Телефоны, смарт-часы, плееры, наушники
                
                Обе компании выходят на рынок Азии. Потенциальных клиентов - 500 млн. человек.
                
                **Платёжная матрица:**
                | Груша / Рокия | Телефоны | Смарт-часы | Плееры | Наушники |
                | -- | :-: | :-: | :-: | :-: |
                | Телефоны | 160 | 320 | 450 | 170 |
                | Ноутбуки | 120 | 250 | 410 | 110 |
                | Десктопы | 180 | 400 | 450 | 150 |
                
                > В платёжной матрице отражено количество клиентов, которых получит компания Груша. 
                $500 млн. - клиенты Груши = клиенты Рокия$ 
                > 
                > Необходимо найти оптимальные стратегии и средний выигрыш (цену игры).
                ',
            'matrix' =>
                [
                    [160, 320, 450, 170],
                    [120, 250, 410, 110],
                    [180, 400, 450, 150]
                ],
            'flagMatrix' => self::FLAGS_MATRIX[0],
            'first_player' => "Груша",
            'second_player' => "Рокия",
            'name_first_strategies' => ["Телефоны", "Ноутбуки", "Десктопы"],
            'name_second_strategies' => ["Телефоны", "Смарт-часы", "Плееры", "Наушники"],
        ],
        ['name' => 'Торговые войны',
            'description' => '
                <img src="https://i.pinimg.com/564x/d6/65/4a/d6654a05d2a9261d16d59c3baeccee7b.jpg" width="200">
                
                СССР и США находятся в состоянии торгового конфликта, где каждая сторона стремится защитить свои экономические интересы. Они могут выбирать различные стратегии, такие как введение тарифов, санкций или переговоров, чтобы повлиять на экономику другой стороны.
                
                   |    СССР / США     | Введение тарифов | Санкции | Переговоры |
                   |-------------------|------------------|---------|------------|
                   | Введение тарифов  | 5                | -2      | -1         |
                   | Санкции           | -3               |  4      | -2         |
                   | Переговоры        | 0                |  1      | 0          |
                
                > В этой матрице, строки представляют стратегии США, а столбцы - стратегии Китая. 
                > 
                > Значение в каждой ячейке матрицы показывает, сколько крупных торговых компаний приходит из США в СССР или уходит из СССР в США, если они выбирают стратегию из соответствующей строки, а Китай - стратегию из соответствующего столбца.
                ',
            'matrix' =>
                [
                    [5, -2, -1],
                    [-3, 4, -2],
                    [0, 1, 0]
                ],
            'flagMatrix' => self::FLAGS_MATRIX[0],
            'first_player' => "СССР",
            'second_player' => "США",
            'name_first_strategies' => ["Введение тарифов", "Санкции", "Переговоры"],
            'name_second_strategies' => ["Введение тарифов", "Санкции", "Переговоры"],
        ],
        ['name' => 'Тучка и лучик',
            'description' => '
                <img src="https://raskrasdetstvo.com/upload/iblock/dec/dec8c39aa8651085d24994f0d8bb5a45.png" width="100">

                Две команды Тучка и лучик вышли в полуфинал чемпионата мира по футболу. Обе команды находятся в самом низу турнирной сетки.
                
                Прошла уже половина матча и тренер команды Тучка расписал возможные исходы игры в следующей платёжной матрице: 
                
                   | Тучка / Лучик | Атака | Оборона | Контратака |
                   |---------------|-------|---------|------------|
                   | Атака         | 0     | 3       | -2         |
                   | Оборона       | 2     | 0       | -3         |
                   | Контратака    | 1     | -2      | -4         |
                
                > Каковы оптимальный стратегии команд и какая цена игры?
                ',
            'matrix' =>
                [
                    [0, 3, -2],
                    [2, 0, -3],
                    [1, -2, -4]
                ],
            'flagMatrix' => self::FLAGS_MATRIX[0],
            'first_player' => "Тучка",
            'second_player' => "Лучик",
            'name_first_strategies' => ["Атака", "Оборона", "Контратака"],
            'name_second_strategies' => ["Атака", "Оборона", "Контратака"],
        ],
    ];

    /**
     * @param string $str
     * @return string
     */
    private function normalizeDescription(string $str): string
    {
        $rows = explode(PHP_EOL, $str);

        foreach ($rows as &$row) {
            $row = ltrim($row);
        }

        $result = "";
        unset($row);
        array_pop($rows);
        foreach ($rows as $row) {
            $result .= $row . PHP_EOL;
        }

        return trim($result);
    }

    /**
     * @param ObjectManager $manager
     * @return void
     */
    public function load(ObjectManager $manager): void
    {
        /**
         * @var Topic[] $topics
         * @var User[] $users
         */
        $topics = $this->getReferencesByEntityClass(Topic::class);
        $users = $this->getReferencesByEntityClass(User::class);

        // оставляем только топик с матричными играми
        $matrixTopic = null;
        foreach ($topics as $topic) {
            if ("Матричные игры" === $topic->getName())
                $matrixTopic = $topic;
        }

        $owners = array_filter(
            $users,
            fn(User $user): bool => in_array("ROLE_TEACHER", $user->getRoles()) ||
                in_array("ROLE_ADMIN", $user->getRoles())
        );

        foreach (self::TASKS as $task) {
            $taskEntity = new Task();
            $type = $this->faker->randomElement(self::TYPES);

            $taskEntity
                ->setName($task['name'])
                ->setDescription($this->normalizeDescription($task['description']))
                ->setType($type)
                ->setTopic($matrixTopic)
                ->setOwner($type == self::TYPES[1] ? $this->faker->randomElement($owners) : null)
                ->setMatrix($task['matrix'])
                ->setFlagMatrix($task['flagMatrix'])
                ->setNameFirstPlayer($task['first_player'])
                ->setNameSecondPlayer($task['second_player'])
                ->setNameFirstStrategies($task['name_first_strategies'])
                ->setNameSecondStrategies($task['name_second_strategies'])
                ;
            $manager->persist($taskEntity);
            $this->saveReference($taskEntity);
        }

        $manager->flush();
    }

    public static function getGroups(): array
    {
        return [self::DEV_GROUP];
    }

    public function getDependencies(): array
    {
        return [
            TopicFixtures::class,
            UserFixtures::class,
            AchievementFixtures::class
        ];
    }

}