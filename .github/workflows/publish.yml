name: Publish server

on:

  push:
    branches: [ "main" ]
    paths-ignore:
      - 'README.md'
      - 'docs/**'

  workflow_dispatch:
    inputs:
      backend_service:
        type: boolean
        required: false

      frontend_service:
        type: boolean
        required: false

env:
  PREFIX: ghcr.io/dudoserovich

jobs:
  
  # В этой job'е мы проверяем в какой директории были совершены изменения
  check:
    name: Check changed files
    outputs:
      backend_service: ${{ steps.check_files.outputs.backend_service }}
      frontend_service: ${{ steps.check_files.outputs.frontend_service }}

    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 2

      - name: check modified files
        id: check_files
        run: |
          echo "=============== list modified files ==============="
          git diff --name-only HEAD^ HEAD
          echo "========== check paths of modified files =========="
          git diff --name-only HEAD^ HEAD > files.txt
          while IFS= read -r file; do
            echo $file
            if [[ $file == client/* ]]; then
              echo "::set-output name=frontend_service::true"
            elif [[ $file == server/* ]]; then
              echo "::set-output name=backend_service::true"
            else
              echo "file does not belong to any service"
            fi
          done < files.txt
  
  # Собираем и публикуем образ backend части сайта
  backend_service:
    needs: [check]
    if: needs.check.outputs.backend_service == 'true' || github.event.inputs.backend_service == 'true'
    runs-on: ubuntu-latest
    env:
      IMAGE_NAME: egt_backend
    permissions:
      contents: read
      packages: write

    steps:
      - uses: actions/checkout@v3

      - name: Build Docker image
        run: sudo docker build ./server -t $IMAGE_NAME --build-arg ENV=prod

      - name: Login to GitHub container Registry
        run: echo "${{ secrets.PACKAGES_TOKEN }}" | docker login ghcr.io -u ${{ github.repository_owner }} --password-stdin

      - name: Post image to github packages
        run: |
          IMAGE_ID=$PREFIX/$IMAGE_NAME
          docker tag $IMAGE_NAME $IMAGE_ID
          docker push $IMAGE_ID
#          VERSION=${GITHUB_SHA::7}

      - name: Run up vault playbook
        run: |
          echo "${{ secrets.ANSIBLE_VAULT }}" > vault.yml
          cat vault.yml

      - name: Run playbook (deploy)
        uses: dawidd6/action-ansible-playbook@v2
        with:
          playbook: server/playbook.yml
          # Указывайте ключик, не требующий подтверждения в виде пароля и будет вам счастье
          key: ${{ secrets.SSH_KEY }}
#          vault_password: ${{ secrets.ANSIBLE_PASS_VAULT }}
          inventory: |
            [all]
            95.154.71.35 ansible_ssh_user=${{ secrets.SSH_USER }} ansible_ssh_port=${{ secrets.SSH_PORT }} ansible_become_user=${{ secrets.ANSIBLE_BECOME_USER }} ansible_become_password=${{ secrets.ANSIBLE_BECOME_PASSWORD }}
          options: |
            --verbose
            -e @vault.yml

  # Собираем и публикуем образ frontend части сайта
  frontend_service:
    needs: [check]
    if: needs.check.outputs.frontend_service == 'true' || github.event.inputs.frontend_service == 'true'
    runs-on: ubuntu-latest
    env:
      IMAGE_NAME: egt_frontend
    permissions:
      contents: read
      packages: write

    steps:
      - uses: actions/checkout@v3

      - name: Build Docker image
        run: sudo docker build ./client -t $IMAGE_NAME

      - name: Login to GitHub container Registry
        run: echo "${{ secrets.PACKAGES_TOKEN }}" | docker login ghcr.io -u ${{ github.repository_owner }} --password-stdin

      - name: Post image to github packages
        run: |
          IMAGE_ID=$PREFIX/$IMAGE_NAME
          docker tag $IMAGE_NAME $IMAGE_ID
          docker push $IMAGE_ID
#          VERSION=${GITHUB_SHA::7}

      - name: Run up vault playbook
        run: |
          echo "${{ secrets.ANSIBLE_VAULT }}" > vault.yml
          cat vault.yml

      - name: Run playbook (deploy)
        uses: dawidd6/action-ansible-playbook@v2
        with:
          playbook: client/playbook.yml
          # Указывайте ключик, не требующий подтверждения в виде пароля и будет вам счастье
          key: ${{ secrets.SSH_KEY }}
          inventory: |
            [all]
            95.154.71.35 ansible_ssh_user=${{ secrets.SSH_USER }} ansible_ssh_port=${{ secrets.SSH_PORT }} ansible_become_user=${{ secrets.ANSIBLE_BECOME_USER }} ansible_become_password=${{ secrets.ANSIBLE_BECOME_PASSWORD }}
          options: |
            --verbose
            -e @vault.yml

  nginx_service:
    needs: [backend_service, frontend_service]
    # Условие до outputs и inputs говорит о том, что job нужно запускать независимо от того,
    #   что предыдущие job могут быть пропущены
    # Остальная часть условия отвечает за проверку на хотя бы 1 сбилженный образ
    if: ${{
      !cancelled()
      && (success() || failure()
      || needs.backend_service.result == 'skipped' || needs.frontend_service.result == 'skipped')
      && ((needs.check.outputs.backend_service == 'true' || github.event.inputs.backend_service == 'true') 
      || (needs.check.outputs.frontend_service == 'true' || github.event.inputs.frontend_service == 'true'))
      }}
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Run up vault playbook
        run: |
          echo "${{ secrets.ANSIBLE_VAULT }}" > vault.yml
          cat vault.yml

      - name: Run playbook (deploy)
        uses: dawidd6/action-ansible-playbook@v2
        with:
          playbook: playbook.yml
          # Указывайте ключик, не требующий подтверждения в виде пароля и будет вам счастье
          key: ${{ secrets.SSH_KEY }}
          inventory: |
            [all]
            95.154.71.35 ansible_ssh_user=${{ secrets.SSH_USER }} ansible_ssh_port=${{ secrets.SSH_PORT }} ansible_become_user=${{ secrets.ANSIBLE_BECOME_USER }} ansible_become_password=${{ secrets.ANSIBLE_BECOME_PASSWORD }}
          options: |
            --verbose
            -e @vault.yml
          
  # Отправка сообщений telegram-ботом, если один из образов билдился
  # P.S. Чтобы скрыть chat_id, я хитровыебнулся и добавил каждому секрету 'псевдоним'
  send_telegram:
      needs: nginx_service
      strategy:
        matrix:
          chat_id: [dudoser_developer, lissee_developer]
          include:
          - chat_id: dudoser_developer
            secret_chat_id: DUDOSER_CHAT_ID
          - chat_id: lissee_developer
            secret_chat_id: LISSEE_CHAT_ID

      if: ${{
          !cancelled()
          && (success() || failure()
          || needs.nginx_service.result == 'skipped')
        }}
      runs-on: ubuntu-latest
      steps:
      # Получаем случайную картинку утки, раньше были котики((
      - name: wget
        uses: wei/wget@v1
        with:
          args: -O duck.png https://random-d.uk/api/v2/randomimg
          
      # Отправляем сообщение в телеграм с картинкой котика
      - name: Send message with status backend_service and frontend_service
        uses: appleboy/telegram-action@master
        with:
          to: ${{ secrets[matrix.secret_chat_id] }}
          token: ${{ secrets.TELEGRAM_TOKEN }}
          photo: duck.png
          format: 'markdown'
          message: |
            *Репозиторий:* `${{ github.repository }}`
            *Автор тригера:* `${{ github.actor }}`
            
            Отработал процесс публикации со статусами сервисов:
            - `backend`: ${{ needs.nginx_service.needs.backend_service.result }}
            - `frontend`: ${{ needs.nginx_service.needs.frontend_service.result }}
            - `nginx`: ${{ needs.nginx_service.result }}
            
            [Action](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})
            [Посмотреть изменения](https://github.com/${{ github.repository }}/commit/${{github.sha}})
