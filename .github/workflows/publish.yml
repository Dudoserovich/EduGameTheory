name: Publish server

on:

  push:
    branches: [ "main" ]
    paths-ignore:
      - 'README.md'
      - 'backup/**'
      - 'docs/**'
      
  pull_request:
    branches: [ "main" ]
    paths-ignore:
      - 'README.md'
      - 'backup/**'
      - 'docs/**'

  workflow_dispatch:

env:
  PREFIX: ghcr.io/dudoserovich

jobs:
  
  # В этой job'е мы проверяем в какой директории были совершены изменения
  check:
    name: Check changed files
    outputs:
      backend_service: ${{ steps.check_files.outputs.backend_service }}
      frontend_service: ${{ steps.check_files.outputs.frontend_service }}

    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 2

      - name: check modified files
        id: check_files
        run: |
          echo "=============== list modified files ==============="
          git diff --name-only HEAD^ HEAD
          echo "========== check paths of modified files =========="
          git diff --name-only HEAD^ HEAD > files.txt
          while IFS= read -r file; do
            echo $file
            if [[ $file == client/* ]]; then
              echo "::set-output name=frontend_service::true"
            elif [[ $file == server/* ]]; then
              echo "::set-output name=backend_service::true"
            else
              echo "file does not belong to any service"
            fi
          done < files.txt
  
  # Собираем и публикуем образ backend части сайта
  backend_service:
    needs: [check]
    if: needs.check.outputs.backend_service == 'true'
    runs-on: ubuntu-latest
    env:
      IMAGE_NAME: egt_backend
    permissions:
      contents: read
      packages: write

    steps:
      - uses: actions/checkout@v3

      - name: Build Docker image
        run: sudo docker build ./server -t $IMAGE_NAME

      - name: Login to GitHub container Registry
        run: echo "${{ secrets.PACKAGES_TOKEN }}" | docker login ghcr.io -u ${{ github.repository_owner }} --password-stdin

      - name: Post image to github packages
        run: |
          IMAGE_ID=$PREFIX/$IMAGE_NAME
          # VERSION=${GITHUB_SHA::7}
          docker tag $IMAGE_NAME $IMAGE_ID
          docker push $IMAGE_ID

      - name: Run up vault playbook
        run: |
          echo "${{ secrets.ANSIBLE_VAULT }}" >> vault.yml
          ls -la vault.yml

      - name: Run playbook (deploy)
        uses: dawidd6/action-ansible-playbook@v2
        with:
          playbook: playbook.yml
          directory: ./server
          # Указывайте ключик, не требующий подтверждения в виде пароля и будет вам счастье
          key: ${{ secrets.SSH_KEY }}
          vault_password: ${{ secrets.ANSIBLE_PASS_VAULT }}
          inventory: |
            [all]
            95.154.71.35 ansible_ssh_user=${{ secrets.SSH_USER }} ansible_ssh_port=${{ secrets.SSH_PORT }} ansible_become_user=${{ secrets.ANSIBLE_BECOME_USER }} ansible_become_password=${{ secrets.ANSIBLE_BECOME_PASSWORD }}
          options: |
            --verbose
            --extra-vars @vault.yml

  # Собираем и публикуем образ frontend части сайта
  frontend_service:
    needs: [check]
    if: needs.check.outputs.frontend_service == 'true'
    runs-on: ubuntu-latest
    env:
      IMAGE_NAME: egt_frontend
    permissions:
      contents: read
      packages: write

    steps:
      - uses: actions/checkout@v3

      - name: Build Docker image
        run: sudo docker build ./client -t $IMAGE_NAME

      - name: Login to GitHub container Registry
        run: echo "${{ secrets.PACKAGES_TOKEN }}" | docker login ghcr.io -u ${{ github.repository_owner }} --password-stdin

      - name: Post image to github packages
        run: |
          IMAGE_ID=$PREFIX/$IMAGE_NAME
          # VERSION=${GITHUB_SHA::7}
          docker tag $IMAGE_NAME $IMAGE_ID
          docker push $IMAGE_ID

#      - name: Run playbook (deploy)
#        uses: dawidd6/action-ansible-playbook@v2
#        with:
#          playbook: deploy.yml
#          directory: ./client
#          # Указывайте ключик, не требующий подтверждения в виде пароля и будет вам счастье
#          key: ${{ secrets.SSH_KEY }}
#          inventory: |
#            [all]
#            95.154.71.35 ansible_ssh_user=${{secrets.SSH_USER}} ansible_ssh_port=${{ secrets.SSH_PORT }} ansible_become_user=${{ secrets.ANSIBLE_BECOME_USER }} ansible_become_password=${{ secrets.ANSIBLE_BECOME_PASSWORD }}
#          options: |
#            --verbose
          
  # Отправка сообщений telegram-ботом, если один из образов билдился
  # P.S. Пока отправка сообщений настроена только на владельца репозитория :D
  send_telegram:
      needs: [backend_service, frontend_service]
      # Условие до outputs говорит о том, что job нужно запускать независимо от того, 
      #   что предыдущие job могут быть пропущены
      # Остальная часть условия отвечает за проверку на хотя бы 1 сбилженный образ
      if: ${{ 
        !cancelled() 
        && (success() || failure() 
          || needs.backend_service.result == 'skipped' || needs.frontend_service.result == 'skipped')
        && (needs.check.outputs.backend_service == 'true' || needs.check.outputs.frontend_service == 'true')
        }}
      runs-on: ubuntu-latest
      steps:
      
      # Получаем случайную картинку утки, раньше были котики((
      - name: wget
        uses: wei/wget@v1
        with:
          args: -O duck.png https://random-d.uk/api/v2/randomimg
#          args: -O cat.png https://cataas.com/cat
          
      # Отправляем сообщение в телеграм с картинкой котика
      - name: Send message with status backend_service and frontend_service
        uses: appleboy/telegram-action@master
#        strategy:
#          matrix:
#            chat-id: [ ]
        with:
          to: ${{ secrets.TELEGRAM_TO }}
          token: ${{ secrets.TELEGRAM_TOKEN }}
#          photo: cat.png
          photo: duck.png
          format: 'markdown'
          message: |
            *Репозиторий:* `${{ github.repository }}`
            *Автор тригера:* `${{ github.actor }}`
            
            Отработал процесс публикации со статусами сервисов:
            - `backend`: ${{ needs.backend_service.result }}
            - `frontend`: ${{ needs.frontend_service.result }}
            
            [Action](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})
            [Посмотреть изменения](https://github.com/${{ github.repository }}/commit/${{github.sha}})
