name: Publish server

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  BACKEND_IMAGE: dudoserovich/egt_backend
  FRONTEND_IMAGE: dudoserovich/egt_frontend
  IMAGE_NAME: app

jobs:

  check:
    name: Check changed files
    outputs:
      backend_service: ${{ steps.check_files.outputs.backend_service }}
      frontend_service: ${{ steps.check_files.outputs.frontend_service }}

    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 2

      - name: check modified files
        id: check_files
        run: |
          echo "=============== list modified files ==============="
          git diff --name-only HEAD^ HEAD
          echo "========== check paths of modified files =========="
          git diff --name-only HEAD^ HEAD > files.txt
          while IFS= read -r file; do
            echo $file
            if [[ $file == client/* ]]; then
              echo "::set-output name=frontend_service::true"
            elif [[ $file == server/* ]]; then
              echo "::set-output name=backend_service::true"
            else
              echo "file does not belong to any service"
            fi
          done < files.txt

  backend_service:
    needs: check
    if: needs.check.outputs.backend_service == 'true'
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - uses: actions/checkout@v3
      - name: Build backend
        working-directory: ./server
        run: |
          echo "Building backend"
          docker build --file Dockerfile --tag $BACKEND_IMAGE .

      - name: Declare nginx IMAGE_ID:VERSION
        working-directory: ./scripts
        env:
          IMAGE_NAME: ${{ env.$BACKEND_IMAGE }}
        run: ./declare_image_id_and_version.sh

      - name: Push backend image
        run: |
          docker tag $BACKEND_IMAGE $IMAGE_ID:latest
          docker tag $BACKEND_IMAGE $IMAGE_ID:$VERSION
          echo "${{ secrets.PACKAGES_TOKEN }}" | docker login $REGISTRY -u dudoserovich --password-stdin
          docker push $IMAGE_ID:latest
          docker push $IMAGE_ID:$VERSION